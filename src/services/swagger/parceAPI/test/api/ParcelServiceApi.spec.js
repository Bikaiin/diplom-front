/*
 * service/service.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Serviceserviceproto);
  }
}(this, function(expect, Serviceserviceproto) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Serviceserviceproto.ParcelServiceApi();
  });

  describe('(package)', function() {
    describe('ParcelServiceApi', function() {
      describe('parcelServiceCreateParcelSize', function() {
        it('should call parcelServiceCreateParcelSize successfully', function(done) {
          // TODO: uncomment, update parameter values for parcelServiceCreateParcelSize call and complete the assertions
          /*
          var body = new Serviceserviceproto.ParcelApiCreateParcelRequest();
          body.size = new Serviceserviceproto.ParcelApiSizes();
          body.size.height = 0.0;
          body.size.width = 0.0;
          body.size.length = 0.0;
          body.barcode = "";

          instance.parcelServiceCreateParcelSize(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Serviceserviceproto.ParcelApiCreateParcelResponce);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('parcelServiceGetParcelAudit', function() {
        it('should call parcelServiceGetParcelAudit successfully', function(done) {
          // TODO: uncomment, update parameter values for parcelServiceGetParcelAudit call and complete the assertions
          /*
          var opts = {};
          opts.id = "id_example";

          instance.parcelServiceGetParcelAudit(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Serviceserviceproto.ParcelApiGetParcelAuditResponce);
            {
              let dataCtr = data.events;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Serviceserviceproto.ParcelApiAuditParcel);
                expect(data.changer).to.be.a('string');
                expect(data.changer).to.be("");
                expect(data.time).to.be.a(Date);
                expect(data.time).to.be(new Date());
                expect(data.parcel).to.be.a(Serviceserviceproto.ParcelApiParcel);
                      expect(data.parcel.id).to.be.a('string');
                  expect(data.parcel.id).to.be("");
                  expect(data.parcel.size).to.be.a(Serviceserviceproto.ParcelApiSizes);
                        expect(data.parcel.size.height).to.be.a('number');
                    expect(data.parcel.size.height).to.be(0.0);
                    expect(data.parcel.size.width).to.be.a('number');
                    expect(data.parcel.size.width).to.be(0.0);
                    expect(data.parcel.size.length).to.be.a('number');
                    expect(data.parcel.size.length).to.be(0.0);
                  expect(data.parcel.barcode).to.be.a('string');
                  expect(data.parcel.barcode).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('parcelServiceGetParcels', function() {
        it('should call parcelServiceGetParcels successfully', function(done) {
          // TODO: uncomment parcelServiceGetParcels call and complete the assertions
          /*

          instance.parcelServiceGetParcels(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Serviceserviceproto.ParcelApiGetParcelResponce);
            {
              let dataCtr = data.parcels;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Serviceserviceproto.ParcelApiParcel);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.size).to.be.a(Serviceserviceproto.ParcelApiSizes);
                      expect(data.size.height).to.be.a('number');
                  expect(data.size.height).to.be(0.0);
                  expect(data.size.width).to.be.a('number');
                  expect(data.size.width).to.be(0.0);
                  expect(data.size.length).to.be.a('number');
                  expect(data.size.length).to.be(0.0);
                expect(data.barcode).to.be.a('string');
                expect(data.barcode).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('parcelServiceSaveParcelSize', function() {
        it('should call parcelServiceSaveParcelSize successfully', function(done) {
          // TODO: uncomment, update parameter values for parcelServiceSaveParcelSize call and complete the assertions
          /*
          var body = new Serviceserviceproto.ParcelApiSaveParcelSizeRequest();
          body.parcelId = "";
          body.sizes = new Serviceserviceproto.ParcelApiSizes();
          body.sizes.height = 0.0;
          body.sizes.width = 0.0;
          body.sizes.length = 0.0;

          instance.parcelServiceSaveParcelSize(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Serviceserviceproto.ParcelApiSaveParcelSizeResponce);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('parcelServiceUpdateParcel', function() {
        it('should call parcelServiceUpdateParcel successfully', function(done) {
          // TODO: uncomment, update parameter values for parcelServiceUpdateParcel call and complete the assertions
          /*
          var body = new Serviceserviceproto.ParcelApiUpdateParcelRequest();
          body.id = "";
          body.size = new Serviceserviceproto.ParcelApiSizes();
          body.size.height = 0.0;
          body.size.width = 0.0;
          body.size.length = 0.0;
          body.barcode = "";

          instance.parcelServiceUpdateParcel(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Serviceserviceproto.ParcelApiUpdateParcelResponce);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
