/*
 * service/service.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AuthApiAuthRequest', 'model/AuthApiAuthResponce', 'model/AuthApiCheckResponce', 'model/AuthApiCreateRequest', 'model/AuthApiCreateResponce', 'model/AuthApiGetRolesResponce', 'model/AuthApiGetUsersResponce', 'model/AuthApiRefreshRequest', 'model/AuthApiUpdateUserRequest', 'model/AuthApiUpdateUserResponce', 'model/RpcStatus'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AuthApiAuthRequest'), require('../model/AuthApiAuthResponce'), require('../model/AuthApiCheckResponce'), require('../model/AuthApiCreateRequest'), require('../model/AuthApiCreateResponce'), require('../model/AuthApiGetRolesResponce'), require('../model/AuthApiGetUsersResponce'), require('../model/AuthApiRefreshRequest'), require('../model/AuthApiUpdateUserRequest'), require('../model/AuthApiUpdateUserResponce'), require('../model/RpcStatus'));
  } else {
    // Browser globals (root is window)
    if (!root.Serviceserviceproto) {
      root.Serviceserviceproto = {};
    }
    root.Serviceserviceproto.AuthServiceApi = factory(root.Serviceserviceproto.ApiClient, root.Serviceserviceproto.AuthApiAuthRequest, root.Serviceserviceproto.AuthApiAuthResponce, root.Serviceserviceproto.AuthApiCheckResponce, root.Serviceserviceproto.AuthApiCreateRequest, root.Serviceserviceproto.AuthApiCreateResponce, root.Serviceserviceproto.AuthApiGetRolesResponce, root.Serviceserviceproto.AuthApiGetUsersResponce, root.Serviceserviceproto.AuthApiRefreshRequest, root.Serviceserviceproto.AuthApiUpdateUserRequest, root.Serviceserviceproto.AuthApiUpdateUserResponce, root.Serviceserviceproto.RpcStatus);
  }
}(this, function(ApiClient, AuthApiAuthRequest, AuthApiAuthResponce, AuthApiCheckResponce, AuthApiCreateRequest, AuthApiCreateResponce, AuthApiGetRolesResponce, AuthApiGetUsersResponce, AuthApiRefreshRequest, AuthApiUpdateUserRequest, AuthApiUpdateUserResponce, RpcStatus) {
  'use strict';

  /**
   * AuthService service.
   * @module api/AuthServiceApi
   * @version version not set
   */

  /**
   * Constructs a new AuthServiceApi. 
   * @alias module:api/AuthServiceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the authServiceAuth operation.
     * @callback module:api/AuthServiceApi~authServiceAuthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthApiAuthResponce} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AuthApiAuthRequest} body 
     * @param {module:api/AuthServiceApi~authServiceAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthApiAuthResponce}
     */
    this.authServiceAuth = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling authServiceAuth");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AuthApiAuthResponce;

      return this.apiClient.callApi(
        '/v1/auth', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the authServiceCheck operation.
     * @callback module:api/AuthServiceApi~authServiceCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthApiCheckResponce} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.token 
     * @param {module:api/AuthServiceApi~authServiceCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthApiCheckResponce}
     */
    this.authServiceCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'token': opts['token'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AuthApiCheckResponce;

      return this.apiClient.callApi(
        '/v1/check', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the authServiceCreate operation.
     * @callback module:api/AuthServiceApi~authServiceCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthApiCreateResponce} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AuthApiCreateRequest} body 
     * @param {module:api/AuthServiceApi~authServiceCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthApiCreateResponce}
     */
    this.authServiceCreate = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling authServiceCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AuthApiCreateResponce;

      return this.apiClient.callApi(
        '/v1/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the authServiceGetRoles operation.
     * @callback module:api/AuthServiceApi~authServiceGetRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthApiGetRolesResponce} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AuthServiceApi~authServiceGetRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthApiGetRolesResponce}
     */
    this.authServiceGetRoles = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AuthApiGetRolesResponce;

      return this.apiClient.callApi(
        '/v1/get_roles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the authServiceGetUsers operation.
     * @callback module:api/AuthServiceApi~authServiceGetUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthApiGetUsersResponce} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AuthServiceApi~authServiceGetUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthApiGetUsersResponce}
     */
    this.authServiceGetUsers = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AuthApiGetUsersResponce;

      return this.apiClient.callApi(
        '/v1/get_users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the authServiceRefresh operation.
     * @callback module:api/AuthServiceApi~authServiceRefreshCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthApiAuthResponce} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AuthApiRefreshRequest} body 
     * @param {module:api/AuthServiceApi~authServiceRefreshCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthApiAuthResponce}
     */
    this.authServiceRefresh = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling authServiceRefresh");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AuthApiAuthResponce;

      return this.apiClient.callApi(
        '/v1/refresh', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the authServiceUpdateUser operation.
     * @callback module:api/AuthServiceApi~authServiceUpdateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthApiUpdateUserResponce} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AuthApiUpdateUserRequest} body 
     * @param {module:api/AuthServiceApi~authServiceUpdateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthApiUpdateUserResponce}
     */
    this.authServiceUpdateUser = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling authServiceUpdateUser");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AuthApiUpdateUserResponce;

      return this.apiClient.callApi(
        '/v1/update_user', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
